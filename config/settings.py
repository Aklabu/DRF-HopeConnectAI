"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from datetime import timedelta
import os
from pathlib import Path
from celery.schedules import crontab
from decouple import config
import logging

# Firebase Admin SDK imports
import firebase_admin
from firebase_admin import credentials
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a^0dj9w*!_2@ft2=cz^*j!yk&ub@kan-pvc9p0&mxfy#pg3h3*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',

    # Custom apps
    'accounts',
    'alerts',
    'chatbot',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.CustomUser'

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'EXCEPTION_HANDLER': 'utils.exceptions.custom_exception_handler',
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=10),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}

# drf-spectacular settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Alert System API',
    'DESCRIPTION': 'API for managing alerts and user accounts',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    "COMPONENT_SPLIT_REQUEST": True,  # split request & response serializers
    "POSTPROCESSING_HOOKS": [],
    "SCHEMA_PATH_PREFIX": r"/api",  # only include URLs starting with /api
}

# For production, configure SMTP settings as below:
EMAIL_BACKEND = config('EMAIL_BACKEND')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')

# Firebase configuration
FIREBASE_API_KEY = config('FIREBASE_API_KEY', default='')

# OpenAI API configuration (for chatbot)
OPENAI_API_KEY = config('OPENAI_API_KEY')

# Celery configuration
CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
CELERY_TIMEZONE = TIME_ZONE

# Celery Beat Schedule
CELERY_BEAT_SCHEDULE = {
    # ... existing schedules
    'fetch-weather-alerts': {
        'task': 'alerts.tasks.fetch_weather_alerts_task',
        'schedule': crontab(minute='*/30'),  # Every 30 minutes
    },
    'expire-old-alerts': {
        'task': 'alerts.tasks.expire_alerts_task',
        'schedule': crontab(hour=2, minute=0),  # Daily at 2 AM
    },
}


# FIREBASE ADMIN SDK CONFIGURATION

def get_firebase_credentials():
    """
    Get Firebase credentials from service account file
    Supports multiple path configurations for flexibility
    """
    try:
        # Priority 1: Environment variable path (recommended for production)
        credentials_path = config('FIREBASE_CREDENTIALS_PATH', default='')
        
        # Priority 2: Default path in project root
        if not credentials_path or not os.path.exists(credentials_path):
            credentials_path = BASE_DIR / 'firebase-service-account.json'
        
        # Priority 3: In config directory (same as settings.py)
        if not os.path.exists(credentials_path):
            credentials_path = BASE_DIR / 'config' / 'firebase-service-account.json'
        
        # Priority 4: In a secure credentials directory
        if not os.path.exists(credentials_path):
            credentials_path = BASE_DIR / 'credentials' / 'firebase-service-account.json'
        
        # Validate file exists
        if not os.path.exists(credentials_path):
            raise ImproperlyConfigured(
                f"Firebase credentials file not found. Searched paths:\n"
                f"1. {config('FIREBASE_CREDENTIALS_PATH', default='Not set')}\n"
                f"2. {BASE_DIR / 'firebase-service-account.json'}\n"
                f"3. {BASE_DIR / 'config' / 'firebase-service-account.json'}\n"
                f"4. {BASE_DIR / 'credentials' / 'firebase-service-account.json'}\n"
                f"Please ensure the Firebase service account JSON file exists at one of these locations\n"
                f"or set FIREBASE_CREDENTIALS_PATH environment variable."
            )
        
        return credentials.Certificate(str(credentials_path))
    
    except Exception as e:
        raise ImproperlyConfigured(f"Error loading Firebase credentials: {str(e)}")


def initialize_firebase():
    """
    Initialize Firebase Admin SDK with proper error handling
    """
    try:
        # Check if Firebase is already initialized
        if firebase_admin._apps:
            print("üî• Firebase Admin SDK already initialized")
            return True
        
        # Get credentials and initialize
        cred = get_firebase_credentials()
        
        # Initialize with project configuration
        firebase_admin.initialize_app(cred, {
            'projectId': config('FIREBASE_PROJECT_ID', default=''),
        })
        
        print("‚úÖ Firebase Admin SDK initialized successfully")
        return True
        
    except ImproperlyConfigured as e:
        print(f"‚ö†Ô∏è  Firebase configuration warning: {str(e)}")
        
        # In development, we can continue without Firebase
        if DEBUG:
            print("üìù Running in DEBUG mode - continuing without Firebase")
            return False
        else:
            # In production, Firebase might be required
            if config('REQUIRE_FIREBASE', default=False, cast=bool):
                raise e
            else:
                print("üö´ Firebase not required in production - continuing without it")
                return False
        
    except Exception as e:
        print(f"‚ùå Firebase initialization failed: {str(e)}")
        
        # In production with REQUIRE_FIREBASE=True, raise the exception
        if not DEBUG and config('REQUIRE_FIREBASE', default=False, cast=bool):
            raise ImproperlyConfigured(f"Firebase initialization required in production: {str(e)}")
        
        return False


# Initialize Firebase Admin SDK
FIREBASE_AVAILABLE = initialize_firebase()

# Firebase settings from environment variables
FIREBASE_PROJECT_ID = config('FIREBASE_PROJECT_ID')
FCM_SERVER_KEY = config('FCM_SERVER_KEY', default='')  # For direct FCM API calls (if needed)


# LOGGING CONFIGURATION (Enhanced with Firebase logging)
# Ensure logs directory exists
LOGS_DIR = BASE_DIR / 'logs'
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'django.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'alerts_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'alerts.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'firebase_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_DIR / 'firebase.log',
            'maxBytes': 1024*1024*5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'alerts': {
            'handlers': ['console', 'alerts_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'firebase_admin': {
            'handlers': ['console', 'firebase_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'alerts.tasks': {
            'handlers': ['console', 'alerts_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'alerts.services': {
            'handlers': ['console', 'firebase_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}


# CACHE CONFIGURATION (Optional - for better performance)
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': config('REDIS_URL', default='redis://127.0.0.1:6379/1'),
    }
}

# Session configuration (optional - to use Redis for sessions)
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'


# ALERTS APP SPECIFIC SETTINGS

# Weather alerts configuration
WEATHER_ALERTS_ENABLED = config('WEATHER_ALERTS_ENABLED', default=True, cast=bool)
WEATHER_API_TIMEOUT = config('WEATHER_API_TIMEOUT', default=30, cast=int)  # seconds
MAX_ALERTS_PER_BATCH = config('MAX_ALERTS_PER_BATCH', default=100, cast=int)

# FCM notification settings
FCM_BATCH_SIZE = config('FCM_BATCH_SIZE', default=500, cast=int)  # FCM limit is 500
FCM_ENABLED = config('FCM_ENABLED', default=FIREBASE_AVAILABLE, cast=bool)

# Alert retention settings
ALERT_RETENTION_DAYS = config('ALERT_RETENTION_DAYS', default=7, cast=int)


# SECURITY SETTINGS (Production considerations)

# CSRF settings
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True

# Session security
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_AGE = 86400  # 24 hours

# Additional security headers
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True

# For production, set these in your environment:
# SECURE_SSL_REDIRECT = True
# SECURE_HSTS_SECONDS = 31536000
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True